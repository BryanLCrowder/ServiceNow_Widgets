{
    "instance": {
        "name": "dev101833",
        "url": "https://dev101833.service-now.com",
        "g_ck": "8eb5a21e1b220510f34d43fddc4bcbab8937056ebd04a902a82af2a7c8afa1d2134fc005"
    },
    "action": "saveWidget",
    "tableName": "sp_widget",
    "name": "Addremove",
    "sys_id": "d79d35301b1a4110f34d43fddc4bcbbb",
    "widget": {
        "template": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Body HTML template",
            "sys_readonly": false,
            "type": "html_template",
            "mandatory": false,
            "displayValue": "<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"dropdown\" ng-if=\"!c.data.listInfo\">\n      <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Type\n        <span class=\"caret\"></span></button>\n      <div ng-if=\"c.data.add_remove\" class=\"text-right\">\n      </div>\n      <ul class=\"dropdown-menu\" ng-if=\"!c.data.listInfo\">\n        <li><a href=\"javascript:void(0)\" ng-click=\"add_remove('Add')\">Add</a></li>\n        <li><a href=\"javascript:void(0)\" ng-click=\"add_remove('Remove')\">Remove</a></li>\n      </ul>\n    </div>\n  </div>\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br>\n  <div class=\"panel panel-default\" ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">{{c.data.add_remove}} Controls</h4>\n    </div>\n    <div class=\"panel-body \">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Add/Remove</th>\n            <th scope=\"col\">Number</th>\n            <th scope=\"col\">Control</th>\n            <th scope=\"col\">Key Control</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"i in c.data.array\">\n            <th scope=\"row\"><input type=\"checkbox\" ng-model=\"i.selected\"></th>\n            <td>{{i.number}}</td>\n            <td>{{i.name}}</td>\n            <td>{{i.key_cont}}</td>\n          </tr>\n      </table>\n      <textarea id=\"reason\" ng-model=\"c.data.reason_add\">Add key controls(s)</textarea>\n    </div>\n    <div class=\"panel-footer text-right\">\n\n<!------------------------------------------- \n Documentation for the pagination \n https://angular-ui.github.io/bootstrap/ \n-------------------------------------------->\n\n      <ul uib-pagination total-items=\"c.data.length\" ng-change=\"pageChanged()\" ng-model=\"c.data.currentPage\" items-per-page=\"c.data.page_size\"></ul>\n    </div>\n  </div>\n  <button ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"openModalAdd(c.data.reason_add); checkDuplicates(c.data.array);\">${Okay}</button>\n  <button ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"cancel()\">${Cancel}</button>\n  <div ng-if=\"c.data.add_remove == 'Remove'\">\n    <h4>\n      Please select which items you want to remove in the related list.\n    </h4>\n  </div>\n\n  <!------------------------------------------- \n  if items were preselected in the related list\n  This is for remove \n  -------------------------------------------->\n\n  <div class=\"panel panel-default\" ng-if=\"c.data.listInfo && c.data.add_remove != 'Remove'\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">Remove Controls</h4>\n    </div>\n    <div class=\"panel-body \">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Add/Remove</th>\n            <th scope=\"col\">Number</th>\n            <th scope=\"col\">Control</th>\n            <th scope=\"col\">Key Control</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"i in c.data.array\">\n            <th scope=\"row\"><input type=\"checkbox\" ng-model=\"i.selected\"></th>\n            <td>{{i.number}}</td>\n            <td>{{i.name}}</td>\n            <td>{{i.key_cont}}</td>\n          </tr>\n      </table>\n      <label for=\"reason\">Reason:</label>\n      <textarea id=\"reason\" ng-model=\"c.data.reason_remove\"></textarea>\n    </div>\n    <div class=\"panel-footer text-right\">\n      <ul uib-pagination total-items=\"c.data.length\" ng-change=\"pageChanged()\" ng-model=\"c.data.currentPage\" items-per-page=\"c.data.page_size\"></ul>\n    </div>\n  </div>\n  <button ng-if=\"c.data.listInfo && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"openModal(c.data.array)\">${Submit}</button>\n  <button ng-if=\"c.data.add_remove == 'Remove' || c.data.listInfo\" class=\"btn btn-primary\"\n    ng-click=\"cancel()\">${Cancel}</button>\n</div>\n\n<!------------------------------------------- \nAdd Modal Invoked\n-------------------------------------------->\n\n<script type=\"text/ng-template\" id=\"modalTemplateAdd\">\n <div class=\"panel panel-default\">\n <div class=\"panel-heading\">\n <h4 class=\"panel-title\">Confirm</h4>\n   </div>\n <div class=\"panel-body wrapper-xl\">\n Are you sure you want to Add these Controls?\n   <div ng-repeat=\"i in c.data.addArray\">\n   {{i.name}} with ID {{i.number}} is already part of Engagment Bank\n   </div>\n  </div>\n <div class=\"panel-footer text-right\">\n <button ng-if=\"c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"confirmAdd(true)\">${Yes}</button>\n <button ng-if=\"!c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"submit()\">${Yes}</button> \n <button ng-if=\"c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"confirmAdd(false)\">${No}</button>\n <button ng-if=\"!c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"closeModal()\">${No}</button>\n </div>\n</script>\n\n<!------------------------------------------- \nRemove Modal Invoked\n-------------------------------------------->\n\n<script type=\"text/ng-template\" id=\"modalTemplate\">\n <div class=\"panel panel-default\">\n <div class=\"panel-heading\">\n <h4 class=\"panel-title\">Confirm</h4>\n   </div>\n <div class=\"panel-body wrapper-xl\">\n Are you sure you want to remove these Controls?\n   </div>\n <div class=\"panel-footer textF-right\">\n <button class=\"btn btn-primary\" ng-click=\"add_remove('Remove'); submit(); c.data.submit_remove = true; \">${Okay}</button>\n <button class=\"btn btn-primary\" ng-click=\"closeModal()\">${Close}</button>\n </div>\n </div>\n</script>\n \n\n",
            "readonly": false,
            "hint": "",
            "name": "template",
            "attributes": {},
            "choice": 0,
            "value": "<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"dropdown\" ng-if=\"!c.data.listInfo\">\n      <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Type\n        <span class=\"caret\"></span></button>\n      <div ng-if=\"c.data.add_remove\" class=\"text-right\">\n      </div>\n      <ul class=\"dropdown-menu\" ng-if=\"!c.data.listInfo\">\n        <li><a href=\"javascript:void(0)\" ng-click=\"add_remove('Add')\">Add</a></li>\n        <li><a href=\"javascript:void(0)\" ng-click=\"add_remove('Remove')\">Remove</a></li>\n      </ul>\n    </div>\n  </div>\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br ng-if=\"!c.data.add_remove && !c.data.listInfo\">\n  <br>\n  <div class=\"panel panel-default\" ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">{{c.data.add_remove}} Controls</h4>\n    </div>\n    <div class=\"panel-body \">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Add/Remove</th>\n            <th scope=\"col\">Number</th>\n            <th scope=\"col\">Control</th>\n            <th scope=\"col\">Key Control</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"i in c.data.array\">\n            <th scope=\"row\"><input type=\"checkbox\" ng-model=\"i.selected\"></th>\n            <td>{{i.number}}</td>\n            <td>{{i.name}}</td>\n            <td>{{i.key_cont}}</td>\n          </tr>\n      </table>\n      <textarea id=\"reason\" ng-model=\"c.data.reason_add\">Add key controls(s)</textarea>\n    </div>\n    <div class=\"panel-footer text-right\">\n\n<!------------------------------------------- \n Documentation for the pagination \n https://angular-ui.github.io/bootstrap/ \n-------------------------------------------->\n\n      <ul uib-pagination total-items=\"c.data.length\" ng-change=\"pageChanged()\" ng-model=\"c.data.currentPage\" items-per-page=\"c.data.page_size\"></ul>\n    </div>\n  </div>\n  <button ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"openModalAdd(c.data.reason_add); checkDuplicates(c.data.array);\">${Okay}</button>\n  <button ng-if=\"c.data.add_remove && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"cancel()\">${Cancel}</button>\n  <div ng-if=\"c.data.add_remove == 'Remove'\">\n    <h4>\n      Please select which items you want to remove in the related list.\n    </h4>\n  </div>\n\n  <!------------------------------------------- \n  if items were preselected in the related list\n  This is for remove \n  -------------------------------------------->\n\n  <div class=\"panel panel-default\" ng-if=\"c.data.listInfo && c.data.add_remove != 'Remove'\">\n    <div class=\"panel-heading\">\n      <h4 class=\"panel-title\">Remove Controls</h4>\n    </div>\n    <div class=\"panel-body \">\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Add/Remove</th>\n            <th scope=\"col\">Number</th>\n            <th scope=\"col\">Control</th>\n            <th scope=\"col\">Key Control</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr ng-repeat=\"i in c.data.array\">\n            <th scope=\"row\"><input type=\"checkbox\" ng-model=\"i.selected\"></th>\n            <td>{{i.number}}</td>\n            <td>{{i.name}}</td>\n            <td>{{i.key_cont}}</td>\n          </tr>\n      </table>\n      <label for=\"reason\">Reason:</label>\n      <textarea id=\"reason\" ng-model=\"c.data.reason_remove\"></textarea>\n    </div>\n    <div class=\"panel-footer text-right\">\n      <ul uib-pagination total-items=\"c.data.length\" ng-change=\"pageChanged()\" ng-model=\"c.data.currentPage\" items-per-page=\"c.data.page_size\"></ul>\n    </div>\n  </div>\n  <button ng-if=\"c.data.listInfo && c.data.add_remove != 'Remove'\" class=\"btn btn-primary\"\n    ng-click=\"openModal(c.data.array)\">${Submit}</button>\n  <button ng-if=\"c.data.add_remove == 'Remove' || c.data.listInfo\" class=\"btn btn-primary\"\n    ng-click=\"cancel()\">${Cancel}</button>\n</div>\n\n<!------------------------------------------- \nAdd Modal Invoked\n-------------------------------------------->\n\n<script type=\"text/ng-template\" id=\"modalTemplateAdd\">\n <div class=\"panel panel-default\">\n <div class=\"panel-heading\">\n <h4 class=\"panel-title\">Confirm</h4>\n   </div>\n <div class=\"panel-body wrapper-xl\">\n Are you sure you want to Add these Controls?\n   <div ng-repeat=\"i in c.data.addArray\">\n   {{i.name}} with ID {{i.number}} is already part of Engagment Bank\n   </div>\n  </div>\n <div class=\"panel-footer text-right\">\n <button ng-if=\"c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"confirmAdd(true)\">${Yes}</button>\n <button ng-if=\"!c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"submit()\">${Yes}</button> \n <button ng-if=\"c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"confirmAdd(false)\">${No}</button>\n <button ng-if=\"!c.data.submit_add\" class=\"btn btn-primary\" ng-click=\"closeModal()\">${No}</button>\n </div>\n</script>\n\n<!------------------------------------------- \nRemove Modal Invoked\n-------------------------------------------->\n\n<script type=\"text/ng-template\" id=\"modalTemplate\">\n <div class=\"panel panel-default\">\n <div class=\"panel-heading\">\n <h4 class=\"panel-title\">Confirm</h4>\n   </div>\n <div class=\"panel-body wrapper-xl\">\n Are you sure you want to remove these Controls?\n   </div>\n <div class=\"panel-footer textF-right\">\n <button class=\"btn btn-primary\" ng-click=\"add_remove('Remove'); submit(); c.data.submit_remove = true; \">${Okay}</button>\n <button class=\"btn btn-primary\" ng-click=\"closeModal()\">${Close}</button>\n </div>\n </div>\n</script>\n \n\n",
            "max_length": 65000,
            "ed": {
                "name": "template"
            }
        },
        "css": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "CSS",
            "sys_readonly": false,
            "type": "css",
            "mandatory": false,
            "displayValue": "textarea {\n     width: 100%;\n     -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n     -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n     box-sizing: border-box;         /* Opera/IE 8+ */\n}\n.tableItem {\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n     max-width: 50px;\n   }",
            "readonly": false,
            "hint": "",
            "name": "css",
            "attributes": {},
            "choice": 0,
            "value": "textarea {\n     width: 100%;\n     -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */\n     -moz-box-sizing: border-box;    /* Firefox, other Gecko */\n     box-sizing: border-box;         /* Opera/IE 8+ */\n}\n.tableItem {\n     white-space: nowrap;\n     overflow: hidden;\n     text-overflow: ellipsis;\n     max-width: 50px;\n   }",
            "max_length": 8000,
            "ed": {
                "name": "css"
            }
        },
        "roles": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": 12,
            "label": "Roles",
            "sys_readonly": false,
            "type": "user_roles",
            "mandatory": false,
            "displayValue": "",
            "readonly": false,
            "hint": "",
            "name": "roles",
            "attributes": {
                "no_truncate": "true",
                "update_exempt": "true",
                "record_watcher_blacklist": "true"
            },
            "choice": 0,
            "value": "",
            "max_length": 255,
            "ed": {
                "name": "roles"
            }
        },
        "link": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Link",
            "sys_readonly": false,
            "type": "script",
            "mandatory": false,
            "displayValue": "function link(scope, element, attrs, controller) {\n  \n}",
            "readonly": false,
            "hint": "",
            "name": "link",
            "attributes": {
                "client_script": "true"
            },
            "choice": 0,
            "value": "function link(scope, element, attrs, controller) {\n  \n}",
            "max_length": 65000,
            "ed": {
                "name": "link"
            }
        },
        "description": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Description",
            "sys_readonly": false,
            "type": "string",
            "mandatory": false,
            "displayValue": "",
            "readonly": false,
            "hint": "Defines what the widget does",
            "name": "description",
            "attributes": {
                "edge_encryption_enabled": "true"
            },
            "choice": 0,
            "value": "",
            "max_length": 300,
            "ed": {
                "name": "description"
            }
        },
        "demo_data": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Demo data",
            "sys_readonly": false,
            "type": "json",
            "mandatory": false,
            "displayValue": "",
            "readonly": false,
            "hint": "",
            "name": "demo_data",
            "attributes": {},
            "choice": 0,
            "value": "",
            "max_length": 8000,
            "ed": {
                "name": "demo_data"
            }
        },
        "option_schema": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Option schema",
            "sys_readonly": false,
            "type": "json",
            "mandatory": false,
            "displayValue": "",
            "readonly": false,
            "hint": "",
            "name": "option_schema",
            "attributes": {},
            "choice": 0,
            "value": "",
            "max_length": 8000,
            "ed": {
                "name": "option_schema"
            }
        },
        "script": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Server script",
            "sys_readonly": false,
            "type": "script",
            "mandatory": false,
            "displayValue": "(function () {\n    data.reason_remove = \"Remove key controls(s)\";\n    data.reason_add = \"Add key controls(s)\";\n    data.submit_remove = false;\n    data.submit_add = false;\n    data.array = [];\n    data.nonDublicateArray = []\n    data.array_control = [];\n    data.arrayDuplicate = [];\n    var engagement = $sp.getParameter('eng');\n    var list = $sp.getParameter('list');\n    data.eng = engagement;\n    data.page_size = 20;\n    data.currentPage = 1;\n    data.addArray = [];\n    data.length = 0;\n\n    onPageRun();\n\n    //checking if duplicate records have been seen in other controls\n    if (input && input.action == \"checkDuplicates\") {\n        checkDuplicates();\n    }\n\n    //removing the selected items\n    if (input && input.action == \"remove\") {\n        removingSelected();\n    }\n\n    //submitting the record with no duplicates\n    if (input && input.action == \"submit\") {\n        if(input.yes_no) {\n        submit(input.add_remove);\n        }\n\n        else {   \n            nonDuplicateInsert();\n        }\n    }\n    \n    if(input && input.action ==\"duplicateArray\") {\n        ArrayFix()\n    }\n\n    //Pagination input\n    if (input && input.action == \"nextRecord\") {\n        nextRecord();\n    }\n\n    //Adding to the removed section, implement for Add to qc planned changes -- and update on the plan activity\n    if (input && input.submit_remove) {\n        if (input && input.action == \"submit\") {\n            submit(input.add_remove);\n        }\n    }\n\n    /*------------------------------------------------------\n    The first script that is ran when the page loads\n    -------------------------------------------------------*/\n\n    function onPageRun() {\n        if (!list) {\n            var gr = new GlideRecord(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.chooseWindow(0, data.page_size);\n            gr.query();\n            while (gr.next()) {\n                var obj = {};\n                obj.id = gr.sys_id.toString();\n                obj.number = gr.number.toString();\n                obj.name = gr.name.toString();\n                obj.key_cont = gr.key_control.toString();\n                obj.state = gr.state.getDisplayValue();\n                obj.selected = false;\n                data.array.push(obj);\n\n            }\n\n            getCount(\"add\");\n\n        } else {\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n            gr_remove.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr_remove.chooseWindow(0, data.page_size);\n            gr_remove.query();\n\n            while (gr_remove.next()) {\n                var objRemove = {};\n                objRemove.id = gr_remove.sn_compliance_control.sys_id.toString();\n                objRemove.number = gr_remove.sn_compliance_control.number.toString();\n                objRemove.name = gr_remove.sn_compliance_control.name.toString();\n                objRemove.key_cont = gr_remove.sn_compliance_control.key_control.toString();\n                objRemove.state = gr_remove.sn_compliance_control.state.getDisplayValue();\n                objRemove.selected = true;\n                data.array.push(objRemove);\n            }\n            getCount(\"remove\");\n        }\n    }\n\n\n    function ArrayFix() {\n        var finalArray = [];\n        data.nonDublicateArray = input.array;\n        for(var i = data.nonDublicateArray.length - 1; i>=0; i--){\n            for(var j = 0; j<input.addArray.length; j++){          \n              if(input.array[i].id === input.addArray[j].id){\n                data.nonDublicateArray.splice(i, 1);\n              \n              }\n              \n            }\n            \n        }\n\n        for(var i = 0;i < data.nonDublicateArray.length; i++) {\n            console.log(data.nonDublicateArray[i].selected);\n        }\n             for (i = 0; i < input.array.length; i++) {\n                if (data.nonDublicateArray[i].selected == true) {\n                    finalArray.push(data.nonDublicateArray[i]);\n                }       \n            \n          }\n          data.nonDublicateArray = finalArray;\n    }\n\n    /*------------------------------------------------------\n    Checking for duplicates for the controls\n    -------------------------------------------------------*/\n\n    function checkDuplicates() {\n        for (i = 0; i < input.array.length; i++) {\n            if (input.array[i].selected == true) {\n                var gr_add = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                gr_add.addQuery(\"sn_compliance_control\", input.array[i].id);\n                gr_add.query();\n                while (gr_add.next()) {\n                    data.submit_add = true;\n                    var obj = {};\n                    obj.id = gr_add.sn_compliance_control.sys_id.toString();\n                    obj.number = gr_add.sn_compliance_control.number.toString();\n                    obj.name = gr_add.sn_compliance_control.name.toString();\n                    obj.key_cont = gr_add.sn_compliance_control.key_control.toString();\n                    obj.state = gr_add.sn_compliance_control.state.getDisplayValue();\n                    obj.selected = true;\n                    data.addArray.push(obj);\n                }\n\n            }\n        }\n    }\n\n    /*------------------------------------------------------\n    This will Remove selected items\n    -------------------------------------------------------*/\n\n    function removingSelected() {\n        for (i = 0; i < input.array.length; i++) {\n            input.array[i].selected = false;\n        }\n    }\n\n    /*------------------------------------------------------\n    Submitting function base on parameter entered, If its a\n    add or remove\n    -------------------------------------------------------*/\n\n    function submit(add_remove) {\n        if (add_remove == \"Add\") {\n            for (i = 0; i < input.array.length; i++) {\n               // console.log(input.array[i].selected);\n                if (input.array[i].selected == true) {\n                    //console.log(\"Inside If\");\n                    var gr_insert = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                    gr_insert.initialize();\n                    gr_insert.sn_audit_engagement = engagement;\n                    gr_insert.sn_compliance_control = input.array[i].id;\n                    gr_insert.insert();\n                }\n            }\n        }\n\n        if (add_remove == \"Remove\") {\n            for (i = 0; i < input.array.length; i++) {\n                if (input.array[i].selected == true) {\n                    var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                    gr_remove.addQuery(\"sn_audit_engagement\", engagement);\n                    gr_remove.addQuery(\"sn_compliance_control\", input.array[i].id);\n                    gr_remove.query();\n                    while (gr_remove.next()) {\n                        gr_remove.deleteRecord();\n                    }\n                }\n            }\n        }\n    }\n\n\n   /*------------------------------------------------------\n    Submitting function based on submitting non duplicate \n    entries\n    -------------------------------------------------------*/\n\n    function nonDuplicateInsert() {\n\t\t\tgs.info(\"Inside nondup insert\");\n        for(var i = input.array.length - 1; i>=0; i--){\n            for( var j=0; j<input.addArray.length; j++){\n              if(input.array[i].id === input.addArray[j].id){\n                input.array.splice(i, 1);\n              }\n            }\n          }\n          \n        for (i = 0; i < input.array.length; i++) {\n            if (input.array[i].selected == true) {\n                var gr_insert = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                gr_insert.initialize();\n                gr_insert.sn_audit_engagement = engagement;\n                gr_insert.sn_compliance_control = input.array[i].id;\n                gr_insert.insert();\n            }\n        }\n    }\n\n    /*------------------------------------------------------\n    This will Work with pagination and how to add a page \n    based on the angular directive uib-pagination\n    -------------------------------------------------------*/\n\n    function nextRecord() {\n        if (!list) {\n            data.array = [];\n            var startPage = (input.currentPage - 1) * input.page_size;\n            var endPage = ((input.currentPage - 1) * input.page_size) + input.page_size;\n            var gr = new GlideRecord(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.chooseWindow(startPage, endPage);\n            gr.query();\n\n            while (gr.next()) {\n                var obj = {};\n                obj.id = gr.sys_id.toString();\n                obj.number = gr.number.toString();\n                obj.name = gr.name.toString();\n                obj.key_cont = gr.key_control.toString();\n                obj.state = gr.state.getDisplayValue();\n                obj.add_remove = undefined;\n                obj.selected = false;\n                data.array.push(obj);\n            }\n            data.currentPage = input.currentPage;\n        } else {\n            data.array = [];\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var startPageRemove = (input.currentPage - 1) * input.page_size;\n            var endPageRemove = ((input.currentPage - 1) * input.page_size) + input.page_size;\n            var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n            gr_remove.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr_remove.chooseWindow(startPageRemove, endPageRemove);\n            gr_remove.query();\n\n            while (gr_remove.next()) {\n                var objRemove = {};\n                objRemove.id = gr_remove.sn_compliance_control.sys_id.toString();\n                objRemove.number = gr_remove.sn_compliance_control.number.toString();\n                objRemove.name = gr_remove.sn_compliance_control.name.toString();\n                objRemove.key_cont = gr_remove.sn_compliance_control.key_control.toString();\n                objRemove.state = gr_remove.sn_compliance_control.state.getDisplayValue();\n                objRemove.add_remove = undefined;\n                objRemove.selected = true;\n                data.array.push(objRemove);\n            }\n            data.currentPage = input.currentPage;\n        }\n    }\n\n    /*------------------------------------------------------\n    Getting the full count of controls\n    -------------------------------------------------------*/\n\n    function getCount(countType) {\n        if (countType == \"add\") {\n            var gr = new GlideAggregate(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.addAggregate(\"COUNT\");\n            gr.query();\n            while (gr.next()) {\n                data.length = gr.getAggregate(\"COUNT\");\n            }\n        }\n\n        if (countType == \"remove\") {\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var gr = new GlideAggregate(\"sn_audit_m2m_control_engagement\");\n            gr.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr.addAggregate(\"COUNT\");\n            gr.query();\n            while (gr.next()) {\n                data.length = gr.getAggregate(\"COUNT\");\n            }\n        }\n    }\n\n\n})();",
            "readonly": false,
            "hint": "",
            "name": "script",
            "attributes": {},
            "choice": 0,
            "value": "(function () {\n    data.reason_remove = \"Remove key controls(s)\";\n    data.reason_add = \"Add key controls(s)\";\n    data.submit_remove = false;\n    data.submit_add = false;\n    data.array = [];\n    data.nonDublicateArray = []\n    data.array_control = [];\n    data.arrayDuplicate = [];\n    var engagement = $sp.getParameter('eng');\n    var list = $sp.getParameter('list');\n    data.eng = engagement;\n    data.page_size = 20;\n    data.currentPage = 1;\n    data.addArray = [];\n    data.length = 0;\n\n    onPageRun();\n\n    //checking if duplicate records have been seen in other controls\n    if (input && input.action == \"checkDuplicates\") {\n        checkDuplicates();\n    }\n\n    //removing the selected items\n    if (input && input.action == \"remove\") {\n        removingSelected();\n    }\n\n    //submitting the record with no duplicates\n    if (input && input.action == \"submit\") {\n        if(input.yes_no) {\n        submit(input.add_remove);\n        }\n\n        else {   \n            nonDuplicateInsert();\n        }\n    }\n    \n    if(input && input.action ==\"duplicateArray\") {\n        ArrayFix()\n    }\n\n    //Pagination input\n    if (input && input.action == \"nextRecord\") {\n        nextRecord();\n    }\n\n    //Adding to the removed section, implement for Add to qc planned changes -- and update on the plan activity\n    if (input && input.submit_remove) {\n        if (input && input.action == \"submit\") {\n            submit(input.add_remove);\n        }\n    }\n\n    /*------------------------------------------------------\n    The first script that is ran when the page loads\n    -------------------------------------------------------*/\n\n    function onPageRun() {\n        if (!list) {\n            var gr = new GlideRecord(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.chooseWindow(0, data.page_size);\n            gr.query();\n            while (gr.next()) {\n                var obj = {};\n                obj.id = gr.sys_id.toString();\n                obj.number = gr.number.toString();\n                obj.name = gr.name.toString();\n                obj.key_cont = gr.key_control.toString();\n                obj.state = gr.state.getDisplayValue();\n                obj.selected = false;\n                data.array.push(obj);\n\n            }\n\n            getCount(\"add\");\n\n        } else {\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n            gr_remove.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr_remove.chooseWindow(0, data.page_size);\n            gr_remove.query();\n\n            while (gr_remove.next()) {\n                var objRemove = {};\n                objRemove.id = gr_remove.sn_compliance_control.sys_id.toString();\n                objRemove.number = gr_remove.sn_compliance_control.number.toString();\n                objRemove.name = gr_remove.sn_compliance_control.name.toString();\n                objRemove.key_cont = gr_remove.sn_compliance_control.key_control.toString();\n                objRemove.state = gr_remove.sn_compliance_control.state.getDisplayValue();\n                objRemove.selected = true;\n                data.array.push(objRemove);\n            }\n            getCount(\"remove\");\n        }\n    }\n\n\n    function ArrayFix() {\n        var finalArray = [];\n        data.nonDublicateArray = input.array;\n        for(var i = data.nonDublicateArray.length - 1; i>=0; i--){\n            for(var j = 0; j<input.addArray.length; j++){          \n              if(input.array[i].id === input.addArray[j].id){\n                data.nonDublicateArray.splice(i, 1);\n              \n              }\n              \n            }\n            \n        }\n\n        for(var i = 0;i < data.nonDublicateArray.length; i++) {\n            console.log(data.nonDublicateArray[i].selected);\n        }\n             for (i = 0; i < input.array.length; i++) {\n                if (data.nonDublicateArray[i].selected == true) {\n                    finalArray.push(data.nonDublicateArray[i]);\n                }       \n            \n          }\n          data.nonDublicateArray = finalArray;\n    }\n\n    /*------------------------------------------------------\n    Checking for duplicates for the controls\n    -------------------------------------------------------*/\n\n    function checkDuplicates() {\n        for (i = 0; i < input.array.length; i++) {\n            if (input.array[i].selected == true) {\n                var gr_add = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                gr_add.addQuery(\"sn_compliance_control\", input.array[i].id);\n                gr_add.query();\n                while (gr_add.next()) {\n                    data.submit_add = true;\n                    var obj = {};\n                    obj.id = gr_add.sn_compliance_control.sys_id.toString();\n                    obj.number = gr_add.sn_compliance_control.number.toString();\n                    obj.name = gr_add.sn_compliance_control.name.toString();\n                    obj.key_cont = gr_add.sn_compliance_control.key_control.toString();\n                    obj.state = gr_add.sn_compliance_control.state.getDisplayValue();\n                    obj.selected = true;\n                    data.addArray.push(obj);\n                }\n\n            }\n        }\n    }\n\n    /*------------------------------------------------------\n    This will Remove selected items\n    -------------------------------------------------------*/\n\n    function removingSelected() {\n        for (i = 0; i < input.array.length; i++) {\n            input.array[i].selected = false;\n        }\n    }\n\n    /*------------------------------------------------------\n    Submitting function base on parameter entered, If its a\n    add or remove\n    -------------------------------------------------------*/\n\n    function submit(add_remove) {\n        if (add_remove == \"Add\") {\n            for (i = 0; i < input.array.length; i++) {\n               // console.log(input.array[i].selected);\n                if (input.array[i].selected == true) {\n                    //console.log(\"Inside If\");\n                    var gr_insert = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                    gr_insert.initialize();\n                    gr_insert.sn_audit_engagement = engagement;\n                    gr_insert.sn_compliance_control = input.array[i].id;\n                    gr_insert.insert();\n                }\n            }\n        }\n\n        if (add_remove == \"Remove\") {\n            for (i = 0; i < input.array.length; i++) {\n                if (input.array[i].selected == true) {\n                    var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                    gr_remove.addQuery(\"sn_audit_engagement\", engagement);\n                    gr_remove.addQuery(\"sn_compliance_control\", input.array[i].id);\n                    gr_remove.query();\n                    while (gr_remove.next()) {\n                        gr_remove.deleteRecord();\n                    }\n                }\n            }\n        }\n    }\n\n\n   /*------------------------------------------------------\n    Submitting function based on submitting non duplicate \n    entries\n    -------------------------------------------------------*/\n\n    function nonDuplicateInsert() {\n\t\t\tgs.info(\"Inside nondup insert\");\n        for(var i = input.array.length - 1; i>=0; i--){\n            for( var j=0; j<input.addArray.length; j++){\n              if(input.array[i].id === input.addArray[j].id){\n                input.array.splice(i, 1);\n              }\n            }\n          }\n          \n        for (i = 0; i < input.array.length; i++) {\n            if (input.array[i].selected == true) {\n                var gr_insert = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n                gr_insert.initialize();\n                gr_insert.sn_audit_engagement = engagement;\n                gr_insert.sn_compliance_control = input.array[i].id;\n                gr_insert.insert();\n            }\n        }\n    }\n\n    /*------------------------------------------------------\n    This will Work with pagination and how to add a page \n    based on the angular directive uib-pagination\n    -------------------------------------------------------*/\n\n    function nextRecord() {\n        if (!list) {\n            data.array = [];\n            var startPage = (input.currentPage - 1) * input.page_size;\n            var endPage = ((input.currentPage - 1) * input.page_size) + input.page_size;\n            var gr = new GlideRecord(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.chooseWindow(startPage, endPage);\n            gr.query();\n\n            while (gr.next()) {\n                var obj = {};\n                obj.id = gr.sys_id.toString();\n                obj.number = gr.number.toString();\n                obj.name = gr.name.toString();\n                obj.key_cont = gr.key_control.toString();\n                obj.state = gr.state.getDisplayValue();\n                obj.add_remove = undefined;\n                obj.selected = false;\n                data.array.push(obj);\n            }\n            data.currentPage = input.currentPage;\n        } else {\n            data.array = [];\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var startPageRemove = (input.currentPage - 1) * input.page_size;\n            var endPageRemove = ((input.currentPage - 1) * input.page_size) + input.page_size;\n            var gr_remove = new GlideRecord(\"sn_audit_m2m_control_engagement\");\n            gr_remove.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr_remove.chooseWindow(startPageRemove, endPageRemove);\n            gr_remove.query();\n\n            while (gr_remove.next()) {\n                var objRemove = {};\n                objRemove.id = gr_remove.sn_compliance_control.sys_id.toString();\n                objRemove.number = gr_remove.sn_compliance_control.number.toString();\n                objRemove.name = gr_remove.sn_compliance_control.name.toString();\n                objRemove.key_cont = gr_remove.sn_compliance_control.key_control.toString();\n                objRemove.state = gr_remove.sn_compliance_control.state.getDisplayValue();\n                objRemove.add_remove = undefined;\n                objRemove.selected = true;\n                data.array.push(objRemove);\n            }\n            data.currentPage = input.currentPage;\n        }\n    }\n\n    /*------------------------------------------------------\n    Getting the full count of controls\n    -------------------------------------------------------*/\n\n    function getCount(countType) {\n        if (countType == \"add\") {\n            var gr = new GlideAggregate(\"sn_compliance_control\");\n            gr.addQuery(\"active\", \"true\");\n            gr.addEncodedQuery(\"state!=retired\");\n            gr.addAggregate(\"COUNT\");\n            gr.query();\n            while (gr.next()) {\n                data.length = gr.getAggregate(\"COUNT\");\n            }\n        }\n\n        if (countType == \"remove\") {\n            data.listInfo = list.replace(/,/g, \"^ORsys_idLIKE\");\n            var gr = new GlideAggregate(\"sn_audit_m2m_control_engagement\");\n            gr.addEncodedQuery(\"sys_idLIKE\" + data.listInfo);\n            gr.addAggregate(\"COUNT\");\n            gr.query();\n            while (gr.next()) {\n                data.length = gr.getAggregate(\"COUNT\");\n            }\n        }\n    }\n\n\n})();",
            "max_length": 65000,
            "ed": {
                "name": "script"
            }
        },
        "has_preview": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -7,
            "label": "Has preview",
            "sys_readonly": false,
            "type": "boolean",
            "mandatory": false,
            "displayValue": "true",
            "readonly": false,
            "hint": "Defines whether preview data is available",
            "name": "has_preview",
            "attributes": {},
            "choice": 0,
            "value": "true",
            "max_length": 40,
            "ed": {
                "name": "has_preview"
            }
        },
        "public": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -7,
            "label": "Public",
            "sys_readonly": false,
            "type": "boolean",
            "mandatory": false,
            "displayValue": "true",
            "readonly": false,
            "hint": "Widget publicly available to unauthenticated users",
            "name": "public",
            "attributes": {
                "update_exempt": "true"
            },
            "choice": 0,
            "value": "true",
            "max_length": 40,
            "ed": {
                "name": "public"
            }
        },
        "docs": {
            "sys_mandatory": false,
            "visible": true,
            "table_attributes": {
                "update_synch": "true",
                "synch_attachments": "true"
            },
            "dbType": 12,
            "label": "Docs",
            "sys_readonly": false,
            "type": "reference",
            "mandatory": false,
            "refTable": "sp_documentation",
            "reference_type": "table",
            "displayValue": "",
            "readonly": false,
            "hint": "",
            "name": "docs",
            "attributes": {
                "encode_utf8": "false"
            },
            "reference_key": "sys_id",
            "readonlyClickthrough": false,
            "choice": 0,
            "value": "",
            "max_length": 32,
            "ed": {
                "reference": "sp_documentation",
                "searchField": "title",
                "defaultOperator": "STARTSWITH",
                "name": "docs"
            }
        },
        "client_script": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": -1,
            "label": "Client controller",
            "sys_readonly": false,
            "type": "script",
            "mandatory": false,
            "displayValue": "api.controller = function (spUtil, $scope, $uibModal, $timeout, spModal) {\n    /* widget controller */\n    var c = this;\n    var globalReason = \"\";\n    var globalArray = [];\n    var yesNo = \"\";\n\n    /*------------------------------------------------------\n    This will invoke the submit Function on the server side.\n    -------------------------------------------------------*/\n\n    $scope.submit = function () {\n        c.data.action = \"submit\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        $timeout(function () {\n                parent.location.reload();\n            },\n            500);\n    };\n\n\n    /*------------------------------------------------------\n    This will pull us an additonal modal if the values are\n    prepopulated for the duplicate array called addArray this\n    is just a double confirmation making sure that we are sure\n    we want to remove it from an existing engagement and add \n    the control to this engagement.\n    -------------------------------------------------------*/\n\n    $scope.confirmAdd = function (yes_no) {\n        globalArray = c.data.array;\n        c.data.yes_no = yes_no;\n        yesNo = c.data.yes_no;\n        if (c.data.addArray) {\n            spModal.confirm(\"Are you sure you want to add these controls?\").then(function (confirmation) {\n                addConfirmation(confirmation);\n                \n\n            }, function (notConfirm) {\n                addConfirmation(notConfirm);\n            })\n\n        }\n    \n    };\n\n    function addConfirmation(confirm) {\n\n        if (confirm) {\n            \n            c.data.reason_add = globalReason;\n            var stringAnswer = \"\";\n            var dupAnswer = \"\";\n            var arrayInfo = [];\n            \n            if (c.data.yes_no) {\n            //DuplicateArray();\n            //This is for adding the array that is already being associated.\n            for (i = 0; i < c.data.addArray.length; i++) {\n                stringAnswer += '<br>' + c.data.addArray[i].number + \" was Removed from previous engagement\" \n            }\n\n            for( var j=0; j<c.data.array.length; j++) {\n                console.log(c.data.array[j].selected);\n            }\n\n            for(var i = c.data.array.length - 1; i>=0; i--){\n                for( var j=0; j<c.data.addArray.length; j++){\n                  if(c.data.array[i].id != c.data.addArray[j].id){\n                    arrayInfo.push(c.data.array[i])\n                  }\n                }\n              }\n              //c.data.array = globalArray;\n              \n            //This is for adding the array without already being associated.\n            for (j = 0; j < arrayInfo.length; j++) {\n                if(arrayInfo[j].selected) {\n                dupAnswer += '<br>' + arrayInfo[j].number + \" Was Added\"\n            }\n        }\n        \n            \n                spModal.alert('The Following has Happened ' + stringAnswer + dupAnswer).then(function (answer) {    \n                    c.data.array = globalArray;\n                    adding(answer, c.data.array);\n                    \n                });\n                //c.data.array = globalArray;\n                \n            } \n            else {\n\t\t\t\t\t\t\tgs.console.log(\"Inside else\");\n               \n                nonDuplicateInsert(globalArray)\n            }\n   \n        } else {\n            parent.location.reload();\n        }\n       \n    }\n\n\n\n    function nonDuplicateInsert(array) {\n            c.data.action = \"submit\";\n            c.data.array = array;\n            c.server.update().then(function() {\n               \n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n            c.modalInstance.close();\n                });\n\n            $timeout(function () {\n            parent.location.reload();\n            },\n         500);\n        \n\n    }\n\n    function adding(added, array) { \n        // for( var j=0; j<c.data.array.length; j++) {\n        //     console.log(c.data.array[j].selected);\n        // } \n        c.data.array = array;\n        if(added) {\n        c.data.action = \"submit\";\n        c.server.update().then(function() {\n            c.data.yes_no = yesNo;\n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n            c.modalInstance.close();\n        });\n        $timeout(function () {\n            parent.location.reload();\n        },\n        500);\n    }\n}\n\n\nfunction DuplicateArray() {\n    c.data.action = \"duplicateArray\";\n        c.server.update().then(function (r) {\n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n        });\n    }\n\n\n    /*------------------------------------------------------\n    This will refresh the page on a cancel\n    -------------------------------------------------------*/\n\n    $scope.cancel = function () {\n        c.data.action = \"remove\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        $timeout(function () {\n                parent.location.reload();\n            },\n            500);\n    };\n\n    /*------------------------------------------------------\n    This will invoke a function on the server side to check \n    if there are any dupicates and add them to the AddArray\n    -------------------------------------------------------*/\n\n    $scope.checkDuplicates = function (array) {\n        c.data.action = \"checkDuplicates\";\n        c.server.update().then(function (r) {\n            c.data.reason_add = globalReason;\n            c.data.array = array;\n            c.data.action = undefined;\n        });\n    };\n\n    /*------------------------------------------------------\n    This will Add values if we are adding or removing from \n    the array\n    -------------------------------------------------------*/\n\n    $scope.add_remove = function (add_remove) {\n        c.data.add_remove = add_remove;\n    };\n\n    /*------------------------------------------------------\n    Open Remove Modal\n    -------------------------------------------------------*/\n\n    $scope.openModal = function () {\n        c.modalInstance = $uibModal.open({\n            templateUrl: 'modalTemplate',\n            scope: $scope\n        });\n    };\n\n    /*------------------------------------------------------\n    Open Add Modal\n    -------------------------------------------------------*/\n\n    $scope.openModalAdd = function (reason) {\n        globalReason = reason;\n        c.modalInstance = $uibModal.open({\n            templateUrl: 'modalTemplateAdd',\n            scope: $scope\n        });\n    };\n\n    /*------------------------------------------------------\n    This will close any modal\n    -------------------------------------------------------*/\n\n    $scope.closeModal = function () {\n        c.data.action = \"remove\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        c.modalInstance.close();\n    };\n\n    /*------------------------------------------------------\n    This will invoke the pagination change and open a new \n    query\n    -------------------------------------------------------*/\n\n    $scope.pageChanged = function () {\n        c.data.action = \"nextRecord\";\n        c.server.update().then(function (r) {});\n    };\n\n};",
            "readonly": false,
            "hint": "",
            "name": "client_script",
            "attributes": {
                "client_script": "true"
            },
            "choice": 0,
            "value": "api.controller = function (spUtil, $scope, $uibModal, $timeout, spModal) {\n    /* widget controller */\n    var c = this;\n    var globalReason = \"\";\n    var globalArray = [];\n    var yesNo = \"\";\n\n    /*------------------------------------------------------\n    This will invoke the submit Function on the server side.\n    -------------------------------------------------------*/\n\n    $scope.submit = function () {\n        c.data.action = \"submit\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        $timeout(function () {\n                parent.location.reload();\n            },\n            500);\n    };\n\n\n    /*------------------------------------------------------\n    This will pull us an additonal modal if the values are\n    prepopulated for the duplicate array called addArray this\n    is just a double confirmation making sure that we are sure\n    we want to remove it from an existing engagement and add \n    the control to this engagement.\n    -------------------------------------------------------*/\n\n    $scope.confirmAdd = function (yes_no) {\n        globalArray = c.data.array;\n        c.data.yes_no = yes_no;\n        yesNo = c.data.yes_no;\n        if (c.data.addArray) {\n            spModal.confirm(\"Are you sure you want to add these controls?\").then(function (confirmation) {\n                addConfirmation(confirmation);\n                \n\n            }, function (notConfirm) {\n                addConfirmation(notConfirm);\n            })\n\n        }\n    \n    };\n\n    function addConfirmation(confirm) {\n\n        if (confirm) {\n            \n            c.data.reason_add = globalReason;\n            var stringAnswer = \"\";\n            var dupAnswer = \"\";\n            var arrayInfo = [];\n            \n            if (c.data.yes_no) {\n            //DuplicateArray();\n            //This is for adding the array that is already being associated.\n            for (i = 0; i < c.data.addArray.length; i++) {\n                stringAnswer += '<br>' + c.data.addArray[i].number + \" was Removed from previous engagement\" \n            }\n\n            for( var j=0; j<c.data.array.length; j++) {\n                console.log(c.data.array[j].selected);\n            }\n\n            for(var i = c.data.array.length - 1; i>=0; i--){\n                for( var j=0; j<c.data.addArray.length; j++){\n                  if(c.data.array[i].id != c.data.addArray[j].id){\n                    arrayInfo.push(c.data.array[i])\n                  }\n                }\n              }\n              //c.data.array = globalArray;\n              \n            //This is for adding the array without already being associated.\n            for (j = 0; j < arrayInfo.length; j++) {\n                if(arrayInfo[j].selected) {\n                dupAnswer += '<br>' + arrayInfo[j].number + \" Was Added\"\n            }\n        }\n        \n            \n                spModal.alert('The Following has Happened ' + stringAnswer + dupAnswer).then(function (answer) {    \n                    c.data.array = globalArray;\n                    adding(answer, c.data.array);\n                    \n                });\n                //c.data.array = globalArray;\n                \n            } \n            else {\n\t\t\t\t\t\t\tgs.console.log(\"Inside else\");\n               \n                nonDuplicateInsert(globalArray)\n            }\n   \n        } else {\n            parent.location.reload();\n        }\n       \n    }\n\n\n\n    function nonDuplicateInsert(array) {\n            c.data.action = \"submit\";\n            c.data.array = array;\n            c.server.update().then(function() {\n               \n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n            c.modalInstance.close();\n                });\n\n            $timeout(function () {\n            parent.location.reload();\n            },\n         500);\n        \n\n    }\n\n    function adding(added, array) { \n        // for( var j=0; j<c.data.array.length; j++) {\n        //     console.log(c.data.array[j].selected);\n        // } \n        c.data.array = array;\n        if(added) {\n        c.data.action = \"submit\";\n        c.server.update().then(function() {\n            c.data.yes_no = yesNo;\n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n            c.modalInstance.close();\n        });\n        $timeout(function () {\n            parent.location.reload();\n        },\n        500);\n    }\n}\n\n\nfunction DuplicateArray() {\n    c.data.action = \"duplicateArray\";\n        c.server.update().then(function (r) {\n            c.data.reason_add = globalReason;\n            c.data.action = undefined;\n        });\n    }\n\n\n    /*------------------------------------------------------\n    This will refresh the page on a cancel\n    -------------------------------------------------------*/\n\n    $scope.cancel = function () {\n        c.data.action = \"remove\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        $timeout(function () {\n                parent.location.reload();\n            },\n            500);\n    };\n\n    /*------------------------------------------------------\n    This will invoke a function on the server side to check \n    if there are any dupicates and add them to the AddArray\n    -------------------------------------------------------*/\n\n    $scope.checkDuplicates = function (array) {\n        c.data.action = \"checkDuplicates\";\n        c.server.update().then(function (r) {\n            c.data.reason_add = globalReason;\n            c.data.array = array;\n            c.data.action = undefined;\n        });\n    };\n\n    /*------------------------------------------------------\n    This will Add values if we are adding or removing from \n    the array\n    -------------------------------------------------------*/\n\n    $scope.add_remove = function (add_remove) {\n        c.data.add_remove = add_remove;\n    };\n\n    /*------------------------------------------------------\n    Open Remove Modal\n    -------------------------------------------------------*/\n\n    $scope.openModal = function () {\n        c.modalInstance = $uibModal.open({\n            templateUrl: 'modalTemplate',\n            scope: $scope\n        });\n    };\n\n    /*------------------------------------------------------\n    Open Add Modal\n    -------------------------------------------------------*/\n\n    $scope.openModalAdd = function (reason) {\n        globalReason = reason;\n        c.modalInstance = $uibModal.open({\n            templateUrl: 'modalTemplateAdd',\n            scope: $scope\n        });\n    };\n\n    /*------------------------------------------------------\n    This will close any modal\n    -------------------------------------------------------*/\n\n    $scope.closeModal = function () {\n        c.data.action = \"remove\";\n        c.server.update().then(function (r) {\n            c.data.action = undefined;\n        });\n        c.modalInstance.close();\n    };\n\n    /*------------------------------------------------------\n    This will invoke the pagination change and open a new \n    query\n    -------------------------------------------------------*/\n\n    $scope.pageChanged = function () {\n        c.data.action = \"nextRecord\";\n        c.server.update().then(function (r) {});\n    };\n\n};",
            "max_length": 8000,
            "ed": {
                "name": "client_script"
            }
        },
        "data_table": {
            "sys_mandatory": true,
            "visible": true,
            "dbType": 12,
            "default_value": "sp_instance",
            "label": "Data table",
            "sys_readonly": false,
            "type": "table_name",
            "mandatory": true,
            "displayValue": "sp_instance",
            "readonly": false,
            "hint": "",
            "name": "data_table",
            "attributes": {
                "base_table": "sp_instance",
                "base_start": "true"
            },
            "choice": 0,
            "choices": [],
            "value": "sp_instance",
            "max_length": 80,
            "ed": {
                "name": "data_table"
            }
        },
        "name": {
            "sys_mandatory": true,
            "visible": true,
            "dbType": 12,
            "label": "Name",
            "sys_readonly": false,
            "type": "translated_field",
            "mandatory": true,
            "displayValue": "Addremove",
            "readonly": false,
            "hint": "",
            "name": "name",
            "attributes": {},
            "choice": 0,
            "value": "Addremove",
            "max_length": 40,
            "ed": {
                "name": "name"
            }
        },
        "sys_scope": {
            "sys_mandatory": false,
            "visible": true,
            "table_attributes": {
                "metadata_link_exempt": "true"
            },
            "dbType": 12,
            "label": "Application",
            "sys_readonly": true,
            "type": "reference",
            "mandatory": false,
            "refTable": "sys_store_app",
            "reference_type": "table",
            "displayValue": "GRC: Audit Management",
            "readonly": true,
            "hint": "Application containing this record",
            "name": "sys_scope",
            "attributes": {
                "list_force_default": "true",
                "readonly_clickthrough": "true",
                "ignore_filter_on_new": "true"
            },
            "reference_key": "sys_id",
            "readonlyClickthrough": true,
            "choice": 0,
            "value": "c9b99624c3030200dd921a4112d3aec9",
            "max_length": 32,
            "ed": {
                "reference": "sys_scope",
                "searchField": "name",
                "defaultOperator": "STARTSWITH",
                "name": "sys_scope"
            }
        },
        "id": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": 12,
            "label": "ID",
            "sys_readonly": false,
            "type": "string",
            "mandatory": false,
            "displayValue": "addremove",
            "readonly": false,
            "hint": "Identifier for $sp.embedWidget()",
            "name": "id",
            "attributes": {
                "edge_encryption_enabled": "true"
            },
            "choice": 0,
            "value": "addremove",
            "max_length": 40,
            "ed": {
                "name": "id"
            }
        },
        "field_list": {
            "sys_mandatory": false,
            "visible": true,
            "dependentField": "data_table",
            "dbType": -1,
            "label": "Fields",
            "sys_readonly": false,
            "type": "field_list",
            "mandatory": false,
            "displayValue": "",
            "readonly": false,
            "hint": "",
            "name": "field_list",
            "attributes": {
                "is_multi_text": "false"
            },
            "choice": 0,
            "value": "",
            "max_length": 1000,
            "ed": {
                "dependent_value": "sp_instance",
                "name": "field_list"
            }
        },
        "controller_as": {
            "sys_mandatory": false,
            "visible": true,
            "dbType": 12,
            "label": "controllerAs",
            "sys_readonly": false,
            "type": "string",
            "mandatory": false,
            "displayValue": "c",
            "readonly": false,
            "hint": "Identifier name for a reference to the controller in the directive's scope",
            "name": "controller_as",
            "attributes": {
                "edge_encryption_enabled": "true"
            },
            "choice": 0,
            "value": "c",
            "max_length": 100,
            "ed": {
                "name": "controller_as"
            }
        }
    }
}